import subprocess
import json
import concurrent.futures

def get_latest_version(package_name):
    """Récupère la dernière version disponible d'un package sur PyPI"""
    try:
        result = subprocess.run(
            ["pip", "index", "versions", package_name],
            capture_output=True,
            text=True
        )
        lines = result.stdout.splitlines()
        for line in lines:
            if "Available versions" in line:
                versions = line.split(":")[1].strip().split(", ")
                return package_name, versions[0]  # Dernière version
    except Exception as e:
        return package_name, f"Erreur: {e}"
    return package_name, "Non trouvé"

def get_latest_versions(packages):
    """Récupère les dernières versions en parallèle avec ThreadPoolExecutor"""
    latest_versions = {}
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(get_latest_version, pkg): pkg for pkg in packages}
        for future in concurrent.futures.as_completed(futures):
            package, version = future.result()
            latest_versions[package] = version
    return latest_versions

def get_all_dependencies(packages_with_versions):
    """Exécute pip install --dry-run avec toutes les librairies en une seule commande"""
    package_list = [f"{pkg}=={ver}" for pkg, ver in packages_with_versions.items()]
    try:
        result = subprocess.run(
            ["pip", "install", "--dry-run"] + package_list,
            capture_output=True,
            text=True
        )
        dependencies = []
        for line in result.stdout.splitlines():
            if "Collecting" in line:
                dep = line.split("Collecting")[-1].strip()
                dependencies.append(dep)
        return dependencies
    except Exception as e:
        return [f"Erreur: {e}"]

def main(packages):
    print("Récupération des dernières versions...")
    latest_versions = get_latest_versions(packages)

    print("Récupération des dépendances...")
    dependencies = get_all_dependencies(latest_versions)
    
    output = {
        "latest_versions": latest_versions,
        "dependencies": dependencies
    }
    
    print(json.dumps(output, indent=4))

# Liste des librairies à analyser
packages = ["requests", "flask", "numpy", "pandas", "scipy", "matplotlib"]  # Remplace avec ta liste
main(packages)
